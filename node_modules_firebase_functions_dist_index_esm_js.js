(self["webpackChunkhajaniain"] = self["webpackChunkhajaniain"] || []).push([["node_modules_firebase_functions_dist_index_esm_js"],{

/***/ 27000:
/*!************************************************************!*\
  !*** ./node_modules/@firebase/functions/dist/index.esm.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ 79759);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 72483);
/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/component */ 16034);



/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Standard error codes for different ways a request can fail, as defined by:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * This map is used primarily to convert from a backend error code string to
 * a client SDK error code string, and make sure it's in the supported set.
 */

var errorCodeMap = {
  OK: 'ok',
  CANCELLED: 'cancelled',
  UNKNOWN: 'unknown',
  INVALID_ARGUMENT: 'invalid-argument',
  DEADLINE_EXCEEDED: 'deadline-exceeded',
  NOT_FOUND: 'not-found',
  ALREADY_EXISTS: 'already-exists',
  PERMISSION_DENIED: 'permission-denied',
  UNAUTHENTICATED: 'unauthenticated',
  RESOURCE_EXHAUSTED: 'resource-exhausted',
  FAILED_PRECONDITION: 'failed-precondition',
  ABORTED: 'aborted',
  OUT_OF_RANGE: 'out-of-range',
  UNIMPLEMENTED: 'unimplemented',
  INTERNAL: 'internal',
  UNAVAILABLE: 'unavailable',
  DATA_LOSS: 'data-loss'
};
/**
 * An explicit error that can be thrown from a handler to send an error to the
 * client that called the function.
 */

var HttpsErrorImpl =
/** @class */
function (_super) {
  (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(HttpsErrorImpl, _super);

  function HttpsErrorImpl(code, message, details) {
    var _this = _super.call(this, message) || this; // This is a workaround for a bug in TypeScript when extending Error:
    // tslint:disable-next-line
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work


    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);
    _this.code = code;
    _this.details = details;
    return _this;
  }

  return HttpsErrorImpl;
}(Error);
/**
 * Takes an HTTP status code and returns the corresponding ErrorCode.
 * This is the standard HTTP status code -> error mapping defined in:
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 * @param status An HTTP status code.
 * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
 */


function codeForHTTPStatus(status) {
  // Make sure any successful status is OK.
  if (status >= 200 && status < 300) {
    return 'ok';
  }

  switch (status) {
    case 0:
      // This can happen if the server returns 500.
      return 'internal';

    case 400:
      return 'invalid-argument';

    case 401:
      return 'unauthenticated';

    case 403:
      return 'permission-denied';

    case 404:
      return 'not-found';

    case 409:
      return 'aborted';

    case 429:
      return 'resource-exhausted';

    case 499:
      return 'cancelled';

    case 500:
      return 'internal';

    case 501:
      return 'unimplemented';

    case 503:
      return 'unavailable';

    case 504:
      return 'deadline-exceeded';
  }

  return 'unknown';
}
/**
 * Takes an HTTP response and returns the corresponding Error, if any.
 */


function _errorForResponse(status, bodyJSON, serializer) {
  var code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.

  var description = code;
  var details = undefined; // Then look through the body for explicit details.

  try {
    var errorJSON = bodyJSON && bodyJSON.error;

    if (errorJSON) {
      var status_1 = errorJSON.status;

      if (typeof status_1 === 'string') {
        if (!errorCodeMap[status_1]) {
          // They must've included an unknown error code in the body.
          return new HttpsErrorImpl('internal', 'internal');
        }

        code = errorCodeMap[status_1]; // TODO(klimt): Add better default descriptions for error enums.
        // The default description needs to be updated for the new code.

        description = status_1;
      }

      var message = errorJSON.message;

      if (typeof message === 'string') {
        description = message;
      }

      details = errorJSON.details;

      if (details !== undefined) {
        details = serializer.decode(details);
      }
    }
  } catch (e) {// If we couldn't parse explicit error data, that's fine.
  }

  if (code === 'ok') {
    // Technically, there's an edge case where a developer could explicitly
    // return an error code of OK, and we will treat it as success, but that
    // seems reasonable.
    return null;
  }

  return new HttpsErrorImpl(code, description, details);
}
/**
 * Helper class to get metadata that should be included with a function call.
 */


var ContextProvider =
/** @class */
function () {
  function ContextProvider(authProvider, messagingProvider) {
    var _this = this;

    this.auth = null;
    this.messaging = null;
    this.auth = authProvider.getImmediate({
      optional: true
    });
    this.messaging = messagingProvider.getImmediate({
      optional: true
    });

    if (!this.auth) {
      authProvider.get().then(function (auth) {
        return _this.auth = auth;
      }, function () {
        /* get() never rejects */
      });
    }

    if (!this.messaging) {
      messagingProvider.get().then(function (messaging) {
        return _this.messaging = messaging;
      }, function () {
        /* get() never rejects */
      });
    }
  }

  ContextProvider.prototype.getAuthToken = function () {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
      var token, e_1;
      return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.auth) {
              return [2
              /*return*/
              , undefined];
            }

            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , this.auth.getToken()];

          case 2:
            token = _a.sent();

            if (!token) {
              return [2
              /*return*/
              , undefined];
            }

            return [2
            /*return*/
            , token.accessToken];

          case 3:
            e_1 = _a.sent(); // If there's any error when trying to get the auth token, leave it off.

            return [2
            /*return*/
            , undefined];

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  ContextProvider.prototype.getInstanceIdToken = function () {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {
          return [2
          /*return*/
          , undefined];
        }

        try {
          return [2
          /*return*/
          , this.messaging.getToken()];
        } catch (e) {
          // We don't warn on this, because it usually means messaging isn't set up.
          // console.warn('Failed to retrieve instance id token.', e);
          // If there's any error when trying to get the token, leave it off.
          return [2
          /*return*/
          , undefined];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  ContextProvider.prototype.getContext = function () {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
      var authToken, instanceIdToken;
      return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.getAuthToken()];

          case 1:
            authToken = _a.sent();
            return [4
            /*yield*/
            , this.getInstanceIdToken()];

          case 2:
            instanceIdToken = _a.sent();
            return [2
            /*return*/
            , {
              authToken: authToken,
              instanceIdToken: instanceIdToken
            }];
        }
      });
    });
  };

  return ContextProvider;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';

function mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o, f) {
  var result = {};

  for (var key in o) {
    if (o.hasOwnProperty(key)) {
      result[key] = f(o[key]);
    }
  }

  return result;
}

var Serializer =
/** @class */
function () {
  function Serializer() {} // Takes data and encodes it in a JSON-friendly way, such that types such as
  // Date are preserved.


  Serializer.prototype.encode = function (data) {
    var _this = this;

    if (data == null) {
      return null;
    }

    if (data instanceof Number) {
      data = data.valueOf();
    }

    if (typeof data === 'number' && isFinite(data)) {
      // Any number in JS is safe to put directly in JSON and parse as a double
      // without any loss of precision.
      return data;
    }

    if (data === true || data === false) {
      return data;
    }

    if (Object.prototype.toString.call(data) === '[object String]') {
      return data;
    }

    if (Array.isArray(data)) {
      return data.map(function (x) {
        return _this.encode(x);
      });
    }

    if (typeof data === 'function' || typeof data === 'object') {
      return mapValues(data, function (x) {
        return _this.encode(x);
      });
    } // If we got this far, the data is not encodable.


    throw new Error('Data cannot be encoded in JSON: ' + data);
  }; // Takes data that's been encoded in a JSON-friendly form and returns a form
  // with richer datatypes, such as Dates, etc.


  Serializer.prototype.decode = function (json) {
    var _this = this;

    if (json == null) {
      return json;
    }

    if (json['@type']) {
      switch (json['@type']) {
        case LONG_TYPE: // Fall through and handle this the same as unsigned.

        case UNSIGNED_LONG_TYPE:
          {
            // Technically, this could work return a valid number for malformed
            // data if there was a number followed by garbage. But it's just not
            // worth all the extra code to detect that case.
            var value = Number(json['value']);

            if (isNaN(value)) {
              throw new Error('Data cannot be decoded from JSON: ' + json);
            }

            return value;
          }

        default:
          {
            throw new Error('Data cannot be decoded from JSON: ' + json);
          }
      }
    }

    if (Array.isArray(json)) {
      return json.map(function (x) {
        return _this.decode(x);
      });
    }

    if (typeof json === 'function' || typeof json === 'object') {
      return mapValues(json, function (x) {
        return _this.decode(x);
      });
    } // Anything else is safe to return.


    return json;
  };

  return Serializer;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a Promise that will be rejected after the given duration.
 * The error will be of type HttpsErrorImpl.
 *
 * @param millis Number of milliseconds to wait before rejecting.
 */


function failAfter(millis) {
  var timer;
  var promise = new Promise(function (_, reject) {
    timer = setTimeout(function () {
      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));
    }, millis);
  });
  return {
    timer: timer,
    promise: promise
  };
}
/**
 * The main class for the Firebase Functions SDK.
 */


var Service =
/** @class */
function () {
  /**
   * Creates a new Functions service for the given app and (optional) region or custom domain.
   * @param app_ The FirebaseApp to use.
   * @param regionOrCustomDomain_ one of:
   *   a) A region to call functions from, such as us-central1
   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com
   */
  function Service(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {
    var _this = this;

    if (regionOrCustomDomain_ === void 0) {
      regionOrCustomDomain_ = 'us-central1';
    }

    this.app_ = app_;
    this.fetchImpl = fetchImpl;
    this.serializer = new Serializer();
    this.emulatorOrigin = null;
    this.INTERNAL = {
      delete: function _delete() {
        return Promise.resolve(_this.deleteService());
      }
    };
    this.contextProvider = new ContextProvider(authProvider, messagingProvider); // Cancels all ongoing requests when resolved.

    this.cancelAllRequests = new Promise(function (resolve) {
      _this.deleteService = function () {
        return resolve();
      };
    }); // Resolve the region or custom domain overload by attempting to parse it.

    try {
      var url = new URL(regionOrCustomDomain_);
      this.customDomain = url.origin;
      this.region = 'us-central1';
    } catch (e) {
      this.customDomain = null;
      this.region = regionOrCustomDomain_;
    }
  }

  Object.defineProperty(Service.prototype, "app", {
    get: function get() {
      return this.app_;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns the URL for a callable with the given name.
   * @param name The name of the callable.
   */

  Service.prototype._url = function (name) {
    var projectId = this.app_.options.projectId;

    if (this.emulatorOrigin !== null) {
      var origin_1 = this.emulatorOrigin;
      return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
    }

    if (this.customDomain !== null) {
      return this.customDomain + "/" + name;
    }

    return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
  };
  /**
   * Modify this instance to communicate with the Cloud Functions emulator.
   *
   * Note: this must be called before this instance has been used to do any operations.
   *
   * @param host The emulator host (ex: localhost)
   * @param port The emulator port (ex: 5001)
   */


  Service.prototype.useEmulator = function (host, port) {
    this.emulatorOrigin = "http://" + host + ":" + port;
  };
  /**
   * Changes this instance to point to a Cloud Functions emulator running
   * locally. See https://firebase.google.com/docs/functions/local-emulator
   *
   * @deprecated Prefer the useEmulator(host, port) method.
   * @param origin The origin of the local emulator, such as
   * "http://localhost:5005".
   */


  Service.prototype.useFunctionsEmulator = function (origin) {
    this.emulatorOrigin = origin;
  };
  /**
   * Returns a reference to the callable https trigger with the given name.
   * @param name The name of the trigger.
   */


  Service.prototype.httpsCallable = function (name, options) {
    var _this = this;

    return function (data) {
      return _this.call(name, data, options || {});
    };
  };
  /**
   * Does an HTTP POST and returns the completed response.
   * @param url The url to post to.
   * @param body The JSON body of the post.
   * @param headers The HTTP headers to include in the request.
   * @return A Promise that will succeed when the request finishes.
   */


  Service.prototype.postJSON = function (url, body, headers) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
      var response, e_1, json, e_2;
      return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            headers['Content-Type'] = 'application/json';
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , this.fetchImpl(url, {
              method: 'POST',
              body: JSON.stringify(body),
              headers: headers
            })];

          case 2:
            response = _a.sent();
            return [3
            /*break*/
            , 4];

          case 3:
            e_1 = _a.sent(); // This could be an unhandled error on the backend, or it could be a
            // network error. There's no way to know, since an unhandled error on the
            // backend will fail to set the proper CORS header, and thus will be
            // treated as a network error by fetch.

            return [2
            /*return*/
            , {
              status: 0,
              json: null
            }];

          case 4:
            json = null;
            _a.label = 5;

          case 5:
            _a.trys.push([5, 7,, 8]);

            return [4
            /*yield*/
            , response.json()];

          case 6:
            json = _a.sent();
            return [3
            /*break*/
            , 8];

          case 7:
            e_2 = _a.sent();
            return [3
            /*break*/
            , 8];

          case 8:
            return [2
            /*return*/
            , {
              status: response.status,
              json: json
            }];
        }
      });
    });
  };
  /**
   * Calls a callable function asynchronously and returns the result.
   * @param name The name of the callable trigger.
   * @param data The data to pass as params to the function.s
   */


  Service.prototype.call = function (name, data, options) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;

      return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            url = this._url(name); // Encode any special types, such as dates, in the input data.

            data = this.serializer.encode(data);
            body = {
              data: data
            };
            headers = {};
            return [4
            /*yield*/
            , this.contextProvider.getContext()];

          case 1:
            context = _b.sent();

            if (context.authToken) {
              headers['Authorization'] = 'Bearer ' + context.authToken;
            }

            if (context.instanceIdToken) {
              headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;
            }

            timeout = options.timeout || 70000;
            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;
            return [4
            /*yield*/
            , Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];

          case 2:
            response = _b.sent(); // If service was deleted, interrupted response throws an error.

            if (!response) {
              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');
            }

            error = _errorForResponse(response.status, response.json, this.serializer);

            if (error) {
              throw error;
            }

            if (!response.json) {
              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');
            }

            responseData = response.json.data; // TODO(klimt): For right now, allow "result" instead of "data", for
            // backwards compatibility.

            if (typeof responseData === 'undefined') {
              responseData = response.json.result;
            }

            if (typeof responseData === 'undefined') {
              // Consider the response malformed.
              throw new HttpsErrorImpl('internal', 'Response is missing data field.');
            }

            decodedData = this.serializer.decode(responseData);
            return [2
            /*return*/
            , {
              data: decodedData
            }];
        }
      });
    });
  };

  return Service;
}();

function clearTimeoutWrapper(timer, promise) {
  return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
    var result;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , promise];

        case 1:
          result = _a.sent(); // eslint-disable-next-line @typescript-eslint/no-explicit-any

          clearTimeout(timer);
          return [2
          /*return*/
          , result];
      }
    });
  });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Functions.
 */


var FUNCTIONS_TYPE = 'functions';

function registerFunctions(instance, fetchImpl) {
  var namespaceExports = {
    // no-inline
    Functions: Service
  };

  function factory(container, regionOrCustomDomain) {
    // Dependencies
    var app = container.getProvider('app').getImmediate();
    var authProvider = container.getProvider('auth-internal');
    var messagingProvider = container.getProvider('messaging'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

    return new Service(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);
  }

  instance.INTERNAL.registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(FUNCTIONS_TYPE, factory, "PUBLIC"
  /* PUBLIC */
  ).setServiceProps(namespaceExports).setMultipleInstances(true));
}

var name = "@firebase/functions";
var version = "0.6.1";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

registerFunctions(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.default, fetch.bind(self));
_firebase_app__WEBPACK_IMPORTED_MODULE_0__.default.registerVersion(name, version); //# sourceMappingURL=index.esm.js.map

/***/ }),

/***/ 78597:
/*!***********************************************************!*\
  !*** ./node_modules/firebase/functions/dist/index.esm.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _firebase_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/functions */ 27000);
 //# sourceMappingURL=index.esm.js.map

/***/ }),

/***/ 72483:
/*!*************!*\
  !*** tslib ***!
  \*************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": function() { return /* binding */ __extends; },
/* harmony export */   "__assign": function() { return /* binding */ __assign; },
/* harmony export */   "__rest": function() { return /* binding */ __rest; },
/* harmony export */   "__decorate": function() { return /* binding */ __decorate; },
/* harmony export */   "__param": function() { return /* binding */ __param; },
/* harmony export */   "__metadata": function() { return /* binding */ __metadata; },
/* harmony export */   "__awaiter": function() { return /* binding */ __awaiter; },
/* harmony export */   "__generator": function() { return /* binding */ __generator; },
/* harmony export */   "__createBinding": function() { return /* binding */ __createBinding; },
/* harmony export */   "__exportStar": function() { return /* binding */ __exportStar; },
/* harmony export */   "__values": function() { return /* binding */ __values; },
/* harmony export */   "__read": function() { return /* binding */ __read; },
/* harmony export */   "__spread": function() { return /* binding */ __spread; },
/* harmony export */   "__spreadArrays": function() { return /* binding */ __spreadArrays; },
/* harmony export */   "__await": function() { return /* binding */ __await; },
/* harmony export */   "__asyncGenerator": function() { return /* binding */ __asyncGenerator; },
/* harmony export */   "__asyncDelegator": function() { return /* binding */ __asyncDelegator; },
/* harmony export */   "__asyncValues": function() { return /* binding */ __asyncValues; },
/* harmony export */   "__makeTemplateObject": function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   "__importStar": function() { return /* binding */ __importStar; },
/* harmony export */   "__importDefault": function() { return /* binding */ __importDefault; },
/* harmony export */   "__classPrivateFieldGet": function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   "__classPrivateFieldSet": function() { return /* binding */ __classPrivateFieldSet; }
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ })

}]);
//# sourceMappingURL=node_modules_firebase_functions_dist_index_esm_js.js.map